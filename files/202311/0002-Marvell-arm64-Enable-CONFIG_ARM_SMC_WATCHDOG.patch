From 1b3676f5c6733537d0b0fd93b140705264dd716d Mon Sep 17 00:00:00 2001
From: Pavan Naregundi <pnaregundi@marvell.com>
Date: Fri, 12 Jan 2024 06:38:54 +0000
Subject: [Marvell-arm64] Enable CONFIG_ARM_SMC_WATCHDOG

This change enables CONFIG_ARM_SMC_WATCHDOG in kconfig and dts.
SMC watchdog is replacing the existing AC5_WATCHDOG. All the
changes for AC5_WATCHDOG are removed.

Signed-off-by: Pavan Naregundi <pnaregundi@marvell.com>
---
 ...vell-Add-switching-mmc-watchdog-node.patch |  34 +-
 ...015-ac5-marvell-Add-watchdog-support.patch | 525 ------------------
 patch/kconfig-inclusions                      |   2 +-
 patch/series                                  |   1 -
 4 files changed, 21 insertions(+), 541 deletions(-)
 delete mode 100644 patch/0015-ac5-marvell-Add-watchdog-support.patch

diff --git a/patch/0014-dts-ac5-marvell-Add-switching-mmc-watchdog-node.patch b/patch/0014-dts-ac5-marvell-Add-switching-mmc-watchdog-node.patch
index f312078..0b0f7dc 100644
--- a/patch/0014-dts-ac5-marvell-Add-switching-mmc-watchdog-node.patch
+++ b/patch/0014-dts-ac5-marvell-Add-switching-mmc-watchdog-node.patch
@@ -6,7 +6,7 @@ This patch adds following changes to 98DX25xx and 98DX35xx SoC,
 	- SDMA(Subsystem DMA engine) node for control path Rx/Tx.
 	- prestera node for interupt handing from switching ASIC.
 	- mmc node using Xenon SDHCI Controller.
-	- watchdog node.
+	- arm watchdog node.
 	- clock-frequency in timer node.
 	- ac5-ehci compatible string in usb.
 
@@ -14,12 +14,12 @@ Signed-off-by: Yuval Shaia <yshaia@marvell.com>
 Tested-by: Raz Adashi <raza@marvell.com>
 Reviewed-by: Raz Adashi <raza@marvell.com>
 ---
- arch/arm64/boot/dts/marvell/ac5-98dx25xx.dtsi | 47 ++++++++++++++++++-
- .../boot/dts/marvell/ac5-98dx35xx-rd.dts      |  8 ++++
- 2 files changed, 54 insertions(+), 1 deletion(-)
+ arch/arm64/boot/dts/marvell/ac5-98dx25xx.dtsi | 44 ++++++++++++++++++-
+ .../boot/dts/marvell/ac5-98dx35xx-rd.dts      | 10 ++++-
+ 2 files changed, 52 insertions(+), 2 deletions(-)
 
 diff --git a/arch/arm64/boot/dts/marvell/ac5-98dx25xx.dtsi b/arch/arm64/boot/dts/marvell/ac5-98dx25xx.dtsi
-index 8bce64069..f1f96799b 100644
+index 8bce64069..b4ca6ba4d 100644
 --- a/arch/arm64/boot/dts/marvell/ac5-98dx25xx.dtsi
 +++ b/arch/arm64/boot/dts/marvell/ac5-98dx25xx.dtsi
 @@ -64,6 +64,7 @@ timer {
@@ -70,7 +70,7 @@ index 8bce64069..f1f96799b 100644
  				reg = <0x0 0x80000 0x0 0x500>;
  				interrupts = <GIC_SPI 67 IRQ_TYPE_LEVEL_HIGH>;
  				status = "disabled";
-@@ -296,6 +321,20 @@ spi1: spi@805a8000 {
+@@ -296,6 +321,17 @@ spi1: spi@805a8000 {
  			status = "disabled";
  		};
  
@@ -80,18 +80,15 @@ index 8bce64069..f1f96799b 100644
 +			status = "okay";
 +		};
 +
-+		watchdog@80216000 {
-+			compatible = "marvell,ac5-wd";
-+			reg = <0x0 0x80216000 0 0x1000>,
-+			      <0x0 0x80215000 0 0x1000>;
-+			interrupts = <GIC_SPI 124 IRQ_TYPE_LEVEL_HIGH>;
-+			timeout-sec = <30>;
++		wdog {
++			compatible = "arm,smc-wdt";
++			status = "okay";
 +		};
 +
  		gic: interrupt-controller@80600000 {
  			compatible = "arm,gic-v3";
  			#interrupt-cells = <3>;
-@@ -318,5 +357,11 @@ spi_clock: spi-clock {
+@@ -318,5 +354,11 @@ spi_clock: spi-clock {
  			#clock-cells = <0>;
  			clock-frequency = <200000000>;
  		};
@@ -104,9 +101,18 @@ index 8bce64069..f1f96799b 100644
  	};
  };
 diff --git a/arch/arm64/boot/dts/marvell/ac5-98dx35xx-rd.dts b/arch/arm64/boot/dts/marvell/ac5-98dx35xx-rd.dts
-index f0ebdb84e..45c305d46 100644
+index f0ebdb84e..4b31390c3 100644
 --- a/arch/arm64/boot/dts/marvell/ac5-98dx35xx-rd.dts
 +++ b/arch/arm64/boot/dts/marvell/ac5-98dx35xx-rd.dts
+@@ -29,7 +29,7 @@ aliases {
+ 
+ 	memory@0 {
+ 		device_type = "memory";
+-		reg = <0x2 0x00000000 0x0 0x40000000>;
++		reg = <0x2 0x00000000 0x1 0x00000000>;
+ 	};
+ 
+ 	usb1phy: usb-phy {
 @@ -99,3 +99,11 @@ parition@2 {
  		};
  	};
diff --git a/patch/0015-ac5-marvell-Add-watchdog-support.patch b/patch/0015-ac5-marvell-Add-watchdog-support.patch
deleted file mode 100644
index 75a5bab..0000000
--- a/patch/0015-ac5-marvell-Add-watchdog-support.patch
+++ /dev/null
@@ -1,525 +0,0 @@
-From: Pavan Naregundi <pnaregundi@marvell.com>
-Date: Fri, 10 Mar 2023 00:43:32 +0000
-ac5: marvell: Add watchdog support
-
-WD registers are located in protected CPU area, which gets locked
-after bootrom runs. Therefore need to access them by using SMC, which
-was added in this driver.
-
-Tested-by: Raz Adashi <raza@marvell.com>
-Reviewed-by: Raz Adashi <raza@marvell.com>
-Signed-off-by: Noam Liron <lnoam@marvell.com>
----
- drivers/watchdog/Kconfig   |  16 ++
- drivers/watchdog/Makefile  |   1 +
- drivers/watchdog/ac5_gwd.c | 459 +++++++++++++++++++++++++++++++++++++
- 3 files changed, 476 insertions(+)
- create mode 100644 drivers/watchdog/ac5_gwd.c
-
-diff --git a/drivers/watchdog/Kconfig b/drivers/watchdog/Kconfig
-index 01ce3f41c..a68a1a3b7 100644
---- a/drivers/watchdog/Kconfig
-+++ b/drivers/watchdog/Kconfig
-@@ -395,6 +395,22 @@ config ARMADA_37XX_WATCHDOG
- 	   To compile this driver as a module, choose M here: the
- 	   module will be called armada_37xx_wdt.
- 
-+config MARVELL_AC5_WATCHDOG
-+	tristate "Marvell AlleyCat 5 Watchdog"
-+	depends on ARM64
-+	depends on ARM_ARCH_TIMER
-+	select WATCHDOG_CORE
-+	help
-+	  AC5 Watchdog has two stage timeouts:
-+	  the first signal (WS0) is for alerting the system by interrupt,
-+	  the second one (WS1) is a real hardware reset.
-+
-+	  This driver can operate as a single stage or a two stages watchdog,
-+	  depends on the module parameter "action" (moudle name is ac5-gwd).
-+
-+	  Note: the maximum timeout in the two stages mode is half of that in
-+	  the single stage mode.
-+
- config ASM9260_WATCHDOG
- 	tristate "Alphascale ASM9260 watchdog"
- 	depends on MACH_ASM9260 || COMPILE_TEST
-diff --git a/drivers/watchdog/Makefile b/drivers/watchdog/Makefile
-index 071a2e50b..acf3df558 100644
---- a/drivers/watchdog/Makefile
-+++ b/drivers/watchdog/Makefile
-@@ -39,6 +39,7 @@ obj-$(CONFIG_USBPCWATCHDOG) += pcwd_usb.o
- obj-$(CONFIG_ARM_SP805_WATCHDOG) += sp805_wdt.o
- obj-$(CONFIG_ARM_SBSA_WATCHDOG) += sbsa_gwdt.o
- obj-$(CONFIG_ARMADA_37XX_WATCHDOG) += armada_37xx_wdt.o
-+obj-$(CONFIG_MARVELL_AC5_WATCHDOG) += ac5_gwd.o
- obj-$(CONFIG_ASM9260_WATCHDOG) += asm9260_wdt.o
- obj-$(CONFIG_AT91RM9200_WATCHDOG) += at91rm9200_wdt.o
- obj-$(CONFIG_AT91SAM9X_WATCHDOG) += at91sam9_wdt.o
-diff --git a/drivers/watchdog/ac5_gwd.c b/drivers/watchdog/ac5_gwd.c
-new file mode 100644
-index 000000000..994d1a2db
---- /dev/null
-+++ b/drivers/watchdog/ac5_gwd.c
-@@ -0,0 +1,459 @@
-+// SPDX-License-Identifier: GPL-2.0
-+/*
-+ * AC5 Watchdog driver
-+ *
-+ * Copyright (c) 2015, Linaro Ltd.
-+ * Author: Fu Wei <fu.wei@linaro.org>
-+ *         Suravee Suthikulpanit <Suravee.Suthikulpanit@amd.com>
-+ *         Al Stone <al.stone@linaro.org>
-+ *         Timur Tabi <timur@codeaurora.org>
-+ *
-+ * This program is free software; you can redistribute it and/or modify
-+ * it under the terms of the GNU General Public License 2 as published
-+ * by the Free Software Foundation.
-+ *
-+ * This program is distributed in the hope that it will be useful,
-+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
-+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-+ * GNU General Public License for more details.
-+ *
-+ * AC5 Watchdog has two stage timeouts:
-+ * the first signal (WS0) is for alerting the system by interrupt,
-+ * the second one (WS1) is a real hardware reset.
-+ * More details about the hardware specification of this device:
-+ * ARM DEN0029B - Server Base System Architecture (SBSA)
-+ *
-+ * This driver can operate as a single stage watchdog
-+ * or a two stages watchdog, it's set up by the module parameter "action".
-+ * In the single stage mode, when the timeout is reached, your system
-+ * will be reset by WS1. The first signal (WS0) is ignored.
-+ * In the two stages mode, when the timeout is reached, the first signal (WS0)
-+ * will trigger panic. If the system is getting into trouble and cannot be reset
-+ * by panic or restart properly by the kdump kernel(if supported), then the
-+ * second stage (as long as the first stage) will be reached, system will be
-+ * reset by WS1. This function can help administrator to backup the system
-+ * context info by panic console output or kdump.
-+ *
-+ * SBSA GWDT:
-+ * if action is 1 (the two stages mode):
-+ * |--------WOR-------WS0--------WOR-------WS1
-+ * |----timeout-----(panic)----timeout-----reset
-+ *
-+ * if action is 0 (the single stage mode):
-+ * |------WOR-----WS0(ignored)-----WOR------WS1
-+ * |--------------timeout-------------------reset
-+ *
-+ * Note: Since this watchdog timer has two stages, and each stage is determined
-+ * by WOR, in the single stage mode, the timeout is (WOR * 2); in the two
-+ * stages mode, the timeout is WOR. The maximum timeout in the two stages mode
-+ * is half of that in the single stage mode.
-+ *
-+ */
-+
-+#include <linux/io.h>
-+#include <linux/io-64-nonatomic-lo-hi.h>
-+#include <linux/interrupt.h>
-+#include <linux/module.h>
-+#include <linux/moduleparam.h>
-+#include <linux/of.h>
-+#include <linux/of_device.h>
-+#include <linux/platform_device.h>
-+#include <linux/uaccess.h>
-+#include <linux/watchdog.h>
-+#include <asm/arch_timer.h>
-+#include <linux/arm-smccc.h>
-+
-+/* AC5 SMCs, taken from ATF include/services/arm_arch_svc.h */
-+#define SMC_FID_READ_REG	0x80007FFE
-+#define SMC_FID_WRITE_REG	0x80007FFD
-+
-+#define DRV_NAME		"ac5-gwd"
-+#define WATCHDOG_NAME	"AC5 Watchdog"
-+
-+/* SBSA Generic Watchdog register definitions */
-+/* refresh frame */
-+#define SBSA_GWDT_WRR		0x000
-+
-+/* control frame */
-+#define SBSA_GWDT_WCS		0x000
-+#define SBSA_GWDT_WOR		0x008
-+#define SBSA_GWDT_WCV		0x010
-+
-+/* refresh/control frame */
-+#define SBSA_GWDT_W_IIDR	0xfcc
-+#define SBSA_GWDT_IDR		0xfd0
-+
-+/* Watchdog Control and Status Register */
-+#define SBSA_GWDT_WCS_EN	BIT(0)
-+#define SBSA_GWDT_WCS_WS0	BIT(1)
-+#define SBSA_GWDT_WCS_WS1	BIT(2)
-+
-+#define AC5_ID      0xB400
-+#define AC5X_ID     0x9800
-+#define IML_ID      0xA000
-+#define IMM_ID      0xA200
-+
-+#define WRITE_MASK(addr, mask, val)     \
-+	writel((readl(addr) & (~(mask))) | val, addr)
-+
-+/**
-+ * struct sbsa_gwdt - Internal representation of the SBSA GWDT
-+ * @wdd:		kernel watchdog_device structure
-+ * @clk:		store the System Counter clock frequency, in Hz.
-+ * @refresh_base:	Virtual address of the watchdog refresh frame
-+ * @control_base:	Virtual address of the watchdog control frame
-+ */
-+struct sbsa_gwdt {
-+	struct watchdog_device	wdd;
-+	u32		clk;
-+	u32		refresh_base;
-+	u32		control_base;
-+};
-+
-+#define DEFAULT_TIMEOUT		10 /* seconds */
-+
-+static unsigned int timeout;
-+module_param(timeout, uint, 0);
-+MODULE_PARM_DESC(timeout,
-+		 "Watchdog timeout in seconds. (>=0, default="
-+		 __MODULE_STRING(DEFAULT_TIMEOUT) ")");
-+
-+/*
-+ * action refers to action taken when watchdog gets WS0
-+ * 0 = skip
-+ * 1 = panic
-+ * defaults to skip (0)
-+ */
-+static int action;
-+module_param(action, int, 0);
-+MODULE_PARM_DESC(action, "after watchdog gets WS0 interrupt, do: 0 = skip(*)  1 = panic");
-+
-+static bool nowayout = WATCHDOG_NOWAYOUT;
-+module_param(nowayout, bool, 0444);
-+MODULE_PARM_DESC(nowayout,
-+		 "Watchdog cannot be stopped once started (default="
-+		 __MODULE_STRING(WATCHDOG_NOWAYOUT) ")");
-+
-+static inline u32 smc_readl(unsigned int addr)
-+{
-+	struct arm_smccc_res smc_res;
-+
-+	arm_smccc_smc(SMC_FID_READ_REG,  addr, 0,    0, 0, 0, 0, 0, &smc_res);
-+	return (u32)smc_res.a0;
-+}
-+
-+static inline void smc_writel(unsigned int val, unsigned int addr)
-+{
-+	struct arm_smccc_res smc_res;
-+
-+	arm_smccc_smc(SMC_FID_WRITE_REG, addr, val, 0, 0, 0, 0, 0, &smc_res);
-+}
-+
-+/*
-+ * watchdog operation functions
-+ */
-+static int sbsa_gwdt_set_timeout(struct watchdog_device *wdd,
-+				 unsigned int timeout)
-+{
-+	struct sbsa_gwdt *gwdt = watchdog_get_drvdata(wdd);
-+
-+	wdd->timeout = timeout;
-+
-+	if (action)
-+		smc_writel(gwdt->clk * timeout,
-+		       gwdt->control_base + SBSA_GWDT_WOR);
-+	else
-+		/*
-+		 * In the single stage mode, The first signal (WS0) is ignored,
-+		 * the timeout is (WOR * 2), so the WOR should be configured
-+		 * to half value of timeout.
-+		 */
-+		smc_writel(gwdt->clk / 2 * timeout,
-+		       gwdt->control_base + SBSA_GWDT_WOR);
-+
-+	return 0;
-+}
-+
-+static inline u64 lo_hi_smc_readq(unsigned int addr)
-+{
-+	u32 low, high;
-+
-+	low = smc_readl(addr);
-+	high = smc_readl(addr + 4);
-+	low = smc_readl(addr); /* read twice, as a workaround to HW limitation */
-+	high = smc_readl(addr + 4); /* read twice, as a workaround to HW limitation */
-+
-+	return low + ((u64)high << 32);
-+}
-+
-+
-+static unsigned int sbsa_gwdt_get_timeleft(struct watchdog_device *wdd)
-+{
-+	struct sbsa_gwdt *gwdt = watchdog_get_drvdata(wdd);
-+	u64 timeleft = 0;
-+
-+	/*
-+	 * In the single stage mode, if WS0 is deasserted
-+	 * (watchdog is in the first stage),
-+	 * timeleft = WOR + (WCV - system counter)
-+	 */
-+	if (!action &&
-+	    !(smc_readl(gwdt->control_base + SBSA_GWDT_WCS) & SBSA_GWDT_WCS_WS0))
-+		timeleft += smc_readl(gwdt->control_base + SBSA_GWDT_WOR);
-+
-+	timeleft += lo_hi_smc_readq(gwdt->control_base + SBSA_GWDT_WCV) -
-+		    arch_timer_read_counter();
-+
-+	do_div(timeleft, gwdt->clk);
-+
-+	return timeleft;
-+}
-+
-+static int sbsa_gwdt_keepalive(struct watchdog_device *wdd)
-+{
-+	struct sbsa_gwdt *gwdt = watchdog_get_drvdata(wdd);
-+
-+	/*
-+	 * Writing WRR for an explicit watchdog refresh.
-+	 * You can write anyting (like 0).
-+	 */
-+	smc_writel(0, gwdt->refresh_base + SBSA_GWDT_WRR);
-+
-+	return 0;
-+}
-+
-+static int sbsa_gwdt_start(struct watchdog_device *wdd)
-+{
-+	struct sbsa_gwdt *gwdt = watchdog_get_drvdata(wdd);
-+
-+	/* writing WCS will cause an explicit watchdog refresh */
-+	smc_writel(SBSA_GWDT_WCS_EN, gwdt->control_base + SBSA_GWDT_WCS);
-+
-+	return 0;
-+}
-+
-+static int sbsa_gwdt_stop(struct watchdog_device *wdd)
-+{
-+	struct sbsa_gwdt *gwdt = watchdog_get_drvdata(wdd);
-+
-+	/* Simply write 0 to WCS to clean WCS_EN bit */
-+	smc_writel(0, gwdt->control_base + SBSA_GWDT_WCS);
-+
-+	return 0;
-+}
-+
-+static irqreturn_t sbsa_gwdt_interrupt(int irq, void *dev_id)
-+{
-+	panic(WATCHDOG_NAME " timeout");
-+
-+	return IRQ_HANDLED;
-+}
-+
-+static const struct watchdog_info sbsa_gwdt_info = {
-+	.identity	= WATCHDOG_NAME,
-+	.options	= WDIOF_SETTIMEOUT |
-+			  WDIOF_KEEPALIVEPING |
-+			  WDIOF_MAGICCLOSE |
-+			  WDIOF_CARDRESET,
-+};
-+
-+static const struct watchdog_ops sbsa_gwdt_ops = {
-+	.owner		= THIS_MODULE,
-+	.start		= sbsa_gwdt_start,
-+	.stop		= sbsa_gwdt_stop,
-+	.ping		= sbsa_gwdt_keepalive,
-+	.set_timeout	= sbsa_gwdt_set_timeout,
-+	.get_timeleft	= sbsa_gwdt_get_timeleft,
-+};
-+
-+static int sbsa_gwdt_probe(struct platform_device *pdev)
-+{
-+	u32 rf_base, cf_base;
-+	struct device *dev = &pdev->dev;
-+	struct watchdog_device *wdd;
-+	struct sbsa_gwdt *gwdt;
-+	struct resource *res;
-+	void * __iomem reg;
-+	int ret, irq;
-+	u32 status;
-+
-+	gwdt = devm_kzalloc(dev, sizeof(*gwdt), GFP_KERNEL);
-+	if (!gwdt)
-+		return -ENOMEM;
-+	platform_set_drvdata(pdev, gwdt);
-+
-+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-+	if (IS_ERR(res))
-+		return PTR_ERR(res);
-+	cf_base = res->start;
-+
-+	res = platform_get_resource(pdev, IORESOURCE_MEM, 1);
-+	if (IS_ERR(res))
-+		return PTR_ERR(res);
-+	rf_base = res->start;
-+
-+	/*
-+	 * Get the frequency of system counter from the cp15 interface of ARM
-+	 * Generic timer. We don't need to check it, because if it returns "0",
-+	 * system would panic in very early stage.
-+	 */
-+	gwdt->clk = arch_timer_get_cntfrq();
-+	gwdt->refresh_base = rf_base;
-+	gwdt->control_base = cf_base;
-+
-+	wdd = &gwdt->wdd;
-+	wdd->parent = dev;
-+	wdd->info = &sbsa_gwdt_info;
-+	wdd->ops = &sbsa_gwdt_ops;
-+	wdd->min_timeout = 1;
-+	wdd->max_hw_heartbeat_ms = U32_MAX / gwdt->clk * 1000;
-+	wdd->timeout = DEFAULT_TIMEOUT;
-+	watchdog_set_drvdata(wdd, gwdt);
-+	watchdog_set_nowayout(wdd, nowayout);
-+
-+	status = smc_readl(cf_base + SBSA_GWDT_WCS);
-+	if (status & SBSA_GWDT_WCS_WS1) {
-+		dev_warn(dev, "System reset by WDT.\n");
-+		wdd->bootstatus |= WDIOF_CARDRESET;
-+	}
-+	if (status & SBSA_GWDT_WCS_EN)
-+		set_bit(WDOG_HW_RUNNING, &wdd->status);
-+
-+	if (action) {
-+		irq = platform_get_irq(pdev, 0);
-+		if (irq < 0) {
-+			action = 0;
-+			dev_warn(dev, "unable to get ws0 interrupt.\n");
-+		} else {
-+			/*
-+			 * In case there is a pending ws0 interrupt, just ping
-+			 * the watchdog before registering the interrupt routine
-+			 */
-+			smc_writel(0, rf_base + SBSA_GWDT_WRR);
-+			if (devm_request_irq(dev, irq, sbsa_gwdt_interrupt, 0,
-+					     pdev->name, gwdt)) {
-+				action = 0;
-+				dev_warn(dev, "unable to request IRQ %d.\n",
-+					 irq);
-+			}
-+		}
-+		if (!action)
-+			dev_warn(dev, "falling back to single stage mode.\n");
-+	}
-+	/*
-+	 * In the single stage mode, The first signal (WS0) is ignored,
-+	 * the timeout is (WOR * 2), so the maximum timeout should be doubled.
-+	 */
-+	if (!action)
-+		wdd->max_hw_heartbeat_ms *= 2;
-+
-+	watchdog_init_timeout(wdd, timeout, dev);
-+	/*
-+	 * Update timeout to WOR.
-+	 * Because of the explicit watchdog refresh mechanism,
-+	 * it's also a ping, if watchdog is enabled.
-+	 */
-+	sbsa_gwdt_set_timeout(wdd, wdd->timeout);
-+
-+	watchdog_stop_on_reboot(wdd);
-+	ret = devm_watchdog_register_device(dev, wdd);
-+	if (ret)
-+		return ret;
-+
-+	/* CPSS-14280: WD HW need to trigger reset on WS1.
-+	 * Enable GWD reset out.
-+	 */
-+	smc_writel(0xFFFFFFBF, 0x80210030);
-+
-+	reg = devm_ioremap(dev, 0x7f90004c, 1);
-+	if (IS_ERR(reg))
-+		return PTR_ERR(reg);
-+	switch ((readl(reg) >> 4) & 0xFF00) {
-+	case AC5_ID:
-+		reg = devm_ioremap(dev, 0x840F800C, 1);
-+		if (IS_ERR(reg))
-+			return PTR_ERR(reg);
-+		WRITE_MASK(reg, BIT(6), 0);
-+		break;
-+	case AC5X_ID:
-+		reg = devm_ioremap(dev, 0x944F800C, 1);
-+		if (IS_ERR(reg))
-+			return PTR_ERR(reg);
-+		WRITE_MASK(reg, BIT(7), 0);
-+		break;
-+	case IML_ID:
-+	case IMM_ID:
-+		reg = devm_ioremap(dev, 0x840F800C, 1);
-+		if (IS_ERR(reg))
-+			return PTR_ERR(reg);
-+		WRITE_MASK(reg, BIT(7), 0);
-+		break;
-+	default:
-+		dev_warn(dev, "Failed to enable DFX reset path\n");
-+	}
-+
-+	dev_info(dev, "Initialized with %ds timeout @ %u Hz, action=%d.%s\n",
-+		 wdd->timeout, gwdt->clk, action,
-+		 status & SBSA_GWDT_WCS_EN ? " [enabled]" : "");
-+
-+	return 0;
-+}
-+
-+/* Disable watchdog if it is active during suspend */
-+static int __maybe_unused sbsa_gwdt_suspend(struct device *dev)
-+{
-+	struct sbsa_gwdt *gwdt = dev_get_drvdata(dev);
-+
-+	if (watchdog_active(&gwdt->wdd))
-+		sbsa_gwdt_stop(&gwdt->wdd);
-+
-+	return 0;
-+}
-+
-+/* Enable watchdog if necessary */
-+static int __maybe_unused sbsa_gwdt_resume(struct device *dev)
-+{
-+	struct sbsa_gwdt *gwdt = dev_get_drvdata(dev);
-+
-+	if (watchdog_active(&gwdt->wdd))
-+		sbsa_gwdt_start(&gwdt->wdd);
-+
-+	return 0;
-+}
-+
-+static const struct dev_pm_ops sbsa_gwdt_pm_ops = {
-+	SET_SYSTEM_SLEEP_PM_OPS(sbsa_gwdt_suspend, sbsa_gwdt_resume)
-+};
-+
-+static const struct of_device_id sbsa_gwdt_of_match[] = {
-+	{ .compatible = "marvell,ac5-wd", },
-+	{},
-+};
-+MODULE_DEVICE_TABLE(of, sbsa_gwdt_of_match);
-+
-+static const struct platform_device_id sbsa_gwdt_pdev_match[] = {
-+	{ .name = DRV_NAME, },
-+	{},
-+};
-+MODULE_DEVICE_TABLE(platform, sbsa_gwdt_pdev_match);
-+
-+static struct platform_driver ac5_gwdt_driver = {
-+	.driver = {
-+		.name = DRV_NAME,
-+		.pm = &sbsa_gwdt_pm_ops,
-+		.of_match_table = sbsa_gwdt_of_match,
-+	},
-+	.probe = sbsa_gwdt_probe,
-+	.id_table = sbsa_gwdt_pdev_match,
-+};
-+
-+module_platform_driver(ac5_gwdt_driver);
-+
-+MODULE_DESCRIPTION("AC5 Watchdog Driver");
-+MODULE_AUTHOR("Noam Liron <lnoam@marvell.com>");
-+MODULE_AUTHOR("Fu Wei <fu.wei@linaro.org>");
-+MODULE_AUTHOR("Suravee Suthikulpanit <Suravee.Suthikulpanit@amd.com>");
-+MODULE_AUTHOR("Al Stone <al.stone@linaro.org>");
-+MODULE_AUTHOR("Timur Tabi <timur@codeaurora.org>");
-+MODULE_LICENSE("GPL v2");
-+MODULE_ALIAS("platform:" DRV_NAME);
--- 
-2.25.1
-
diff --git a/patch/kconfig-inclusions b/patch/kconfig-inclusions
index 5add1f8..53e4abb 100644
--- a/patch/kconfig-inclusions
+++ b/patch/kconfig-inclusions
@@ -167,6 +167,7 @@ CONFIG_MTD_NAND_MARVELL=m
 CONFIG_SENSORS_EMC2305=m
 CONFIG_PHY_MVEBU_CP110_COMPHY=y
 CONFIG_SPI_ORION=m
+CONFIG_ARM_SMC_WATCHDOG=y
 # For pensando
 CONFIG_CRYPTO_MANAGER_DISABLE_TESTS=y
 CONFIG_DEVTMPFS_MOUNT=y
@@ -197,7 +198,6 @@ CONFIG_RING_BUFFER_ALLOW_SWAP=y
 CONFIG_KEXEC_FILE=y
 
 [marvell-arm64]
-CONFIG_MARVELL_AC5_WATCHDOG=m
 
 [pensando]
 CONFIG_ARCH_PENSANDO=y
diff --git a/patch/series b/patch/series
index 2c4cd81..10bf915 100755
--- a/patch/series
+++ b/patch/series
@@ -213,7 +213,6 @@ armhf_secondary_boot_online.patch
 0012-spi-a3700-Support-big-endianness-for-AC5-SPI-driver.patch
 0013-dt-bindings-ac5-Add-mmc-and-usb-properties.patch
 0014-dts-ac5-marvell-Add-switching-mmc-watchdog-node.patch
-0015-ac5-marvell-Add-watchdog-support.patch
 0016-ac5-marvell-Add-support-for-emmc.patch
 0017-usb-ehci-Add-support-for-ac5.patch
 0018-mv6xxx-Fix-i2c-lock-due-to-arb-loss.patch
-- 
2.25.1

