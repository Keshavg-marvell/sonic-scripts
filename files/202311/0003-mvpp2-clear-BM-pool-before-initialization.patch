From 2d414ba28a70117764c41448c982f9f6fbf038bb Mon Sep 17 00:00:00 2001
From: Pavan Naregundi <pnaregundi@marvell.com>
Date: Fri, 12 Jan 2024 06:40:28 +0000
Subject: mvpp2: clear BM pool before initialization

Signed-off-by: Pavan Naregundi <pnaregundi@marvell.com>
---
 ...-clear-BM-pool-before-initialization.patch | 62 +++++++++++++++++++
 patch/series                                  |  1 +
 2 files changed, 63 insertions(+)
 create mode 100644 patch/0001-clear-BM-pool-before-initialization.patch

diff --git a/patch/0001-clear-BM-pool-before-initialization.patch b/patch/0001-clear-BM-pool-before-initialization.patch
new file mode 100644
index 0000000..e57269a
--- /dev/null
+++ b/patch/0001-clear-BM-pool-before-initialization.patch
@@ -0,0 +1,62 @@
+From d627b7d0a8c48aff31cb2ba2e94c55716e513382 Mon Sep 17 00:00:00 2001
+From: Jenishkumar Patel <jpatel2@marvell.com>
+Date: Mon, 18 Dec 2023 00:38:24 -0800
+Subject: clear BM pool before initialization
+
+register value persisted after booting the kernel using
+kexec which resulted in kernel panic. Thus cleared the
+BM pool registers before initialisation to fix the issue.
+
+Signed-off-by: Jenishkumar Patel <jpatel2@marvell.com>
+---
+ .../net/ethernet/marvell/mvpp2/mvpp2_main.c   | 28 +++++++++++++++++++
+ 1 file changed, 28 insertions(+)
+
+diff --git a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
+index 68c5ed871..862de8049 100644
+--- a/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
++++ b/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c
+@@ -581,12 +581,40 @@ static int mvpp2_bm_pools_init(struct device *dev, struct mvpp2 *priv)
+ 	return err;
+ }
+ 
++/* Cleanup pool before actual initialization in the OS */
++static void mvpp2_bm_pool_cleanup(struct mvpp2 *priv, int pool_id)
++{
++	u32 val;
++	int i;
++	/* Drain the BM from all possible residues left by firmware */
++	for (i = 0; i < MVPP2_BM_POOL_SIZE_MAX; i++)
++		mvpp2_read(priv, MVPP2_BM_PHY_ALLOC_REG(pool_id));
++	/* Stop the BM pool */
++	val = mvpp2_read(priv, MVPP2_BM_POOL_CTRL_REG(pool_id));
++	val |= MVPP2_BM_STOP_MASK;
++	mvpp2_write(priv, MVPP2_BM_POOL_CTRL_REG(pool_id), val);
++	/* Mask BM all interrupts */
++	mvpp2_write(priv, MVPP2_BM_INTR_MASK_REG(pool_id), 0);
++	/* Clear BM cause register */
++	mvpp2_write(priv, MVPP2_BM_INTR_CAUSE_REG(pool_id), 0);
++}
++
+ static int mvpp2_bm_init(struct device *dev, struct mvpp2 *priv)
+ {
+ 	enum dma_data_direction dma_dir = DMA_FROM_DEVICE;
+ 	int i, err, poolnum = MVPP2_BM_POOLS_NUM;
+ 	struct mvpp2_port *port;
+ 
++	if (priv->percpu_pools)
++		poolnum = mvpp2_get_nrxqs(priv) * 2;
++
++	for (i = 0; i < poolnum; i++) {
++		/* Make sure about the pool state in case it was
++		 * used by firmware.
++		 */
++		mvpp2_bm_pool_cleanup(priv, i);
++	}
++
+ 	if (priv->percpu_pools) {
+ 		for (i = 0; i < priv->port_count; i++) {
+ 			port = priv->port_list[i];
+-- 
+2.25.1
+
diff --git a/patch/series b/patch/series
index 10bf915..2b2b27f 100755
--- a/patch/series
+++ b/patch/series
@@ -222,6 +222,7 @@ armhf_secondary_boot_online.patch
 0021-dts-ac5-Support-boards-with-more-than-4G-DDR.patch
 0022-usb-ac5-Support-board-with-more-than-4G-DDR.patch
 0023-mvneta-ac5x-Support-board-with-more-than-4G-DDR.patch
+0001-clear-BM-pool-before-initialization.patch
 
 # amd-pensando elba support
 0001-hwmon-ltc2978-Add-support-for-LTC3888.patch
-- 
2.25.1

